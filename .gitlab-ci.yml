variables:
  DEPLOY_USER: "infrastructure"
  SERVICE_NAME: "ev-dashboard"
  DOMAIN_DEV: "ev.ltestl.com"
  NETWORK: "ev-network"

.add-ssh-private-key-script: &add-ssh-private-key
  - apk update
  - apk add -qq
  - 'which ssh-agent || ( apk add -qq openssh-client )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | ssh-add -
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - ssh-keyscan -p 22 -H $DEPLOY_SERVER >> ~/.ssh/known_hosts

.build-and-push-script: &build-and-push
  - docker build -t $SERVICE_NAME --cache-from $CI_REGISTRY_IMAGE/latest -f dockerfiles/Dockerfile .
  - docker tag $SERVICE_NAME $CI_REGISTRY_IMAGE/$CI_COMMIT_SHORT_SHA
  - docker tag $SERVICE_NAME $CI_REGISTRY_IMAGE/latest
  - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_SHORT_SHA
  - docker push $CI_REGISTRY_IMAGE/latest
  - echo $CI_REGISTRY_IMAGE/$CI_COMMIT_SHORT_SHA

.create-and-copy-compose-script: &create_and_copy_compose
  - apk update
  - apk add bash && apk add gettext

  - envsubst < docker-compose.yml.template > docker-compose.yml
  - envsubst '${DOMAIN_NAME}' < webserver.template.conf > service.conf

  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "mkdir -p nginx/ssl"
  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "mkdir -p nginx/conf"

  - scp -r docker-compose.yml $DEPLOY_USER@$DEPLOY_SERVER:/home/$DEPLOY_USER/docker-compose.yml
  - scp -r service.conf $DEPLOY_USER@$DEPLOY_SERVER:nginx/conf/service.conf

.deploy-script: &deploy_compose
  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "docker rm -f $SERVICE_NAME"
  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_SHORT_SHA"
  - ssh -T $DEPLOY_USER@$DEPLOY_SERVER "docker-compose run -d -p 80:80 -p 443:443 --name $SERVICE_NAME frontend"

.build_template: &build_job
  image: docker:stable
  tags:
    - $RUNNER_TAG
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    *build-and-push

.deploy_template: &deploy_job
  image: docker:stable
  tags:
    - $RUNNER_TAG
  stage: deploy
  before_script:
    - *add-ssh-private-key
  script:
    - *create_and_copy_compose
    - *deploy_compose

stages:
  - test
  - build
  - deploy

test:
  image: docker/compose:latest
  tags:
    - $RUNNER_TAG
  stage: test
  environment:
    name: testing
  script:
    - echo "Running tests"
    - docker-compose -f docker-compose-tests.yml build --no-cache $SERVICE_NAME
    - docker-compose -f docker-compose-tests.yml run --rm $SERVICE_NAME
    - test_exit_code=$?
    - if [ $test_exit_code -ne 0 ]; then exit $test_exit_code; fi

build&push-dev:
  <<: *build_job
  only:
    refs:
      - dev
  variables:
    REACT_APP_ENVIRONMENT: development
    DOMAIN_NAME: $DOMAIN_DEV

deploy-dev:
  image: docker:git
  tags:
    - $RUNNER_TAG
  stage: deploy
  only:
    refs:
      - dev
  variables:
    DEPLOY_SERVER: $DEPLOY_SERVER_DEV
    DOMAIN_NAME: $DOMAIN_DEV
  before_script:
    - *add-ssh-private-key
  script:
    - *create_and_copy_compose
    - *deploy_compose

